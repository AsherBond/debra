#!/bin/sh
set -e

usage() {
	echo "Usage: $(basename $0) [-p <package>] [-a <arch>] [-h]" >&2
	if [ -n "$1" ]; then
		echo "  -p <package> package name (defaults to \$PWD)" >&2
		echo "  -a <arch>    architecture (defaults to \"all\")" >&2
		echo "  -h           show this help message" >&2
	fi
	exit 1
}

[ "--help" = "$1" ] && usage MOAR
PACKAGE=$(basename $PWD)
ARCH=all
while getopts p:a:h name; do
	case "$name" in
		p) PACKAGE=$OPTARG;;
		a) ARCH=$OPTARG;;
		h) usage MOAR;;
		*) usage;;
	esac
done

if [ -f Makefile.in ]; then
	echo "[debra-makefile] Makefile.in exists, appending to it" >&2
fi
cat >>Makefile.in <<EOF
prefix=@prefix@
exec_prefix=@exec_prefix@
bindir=@bindir@
sbindir=@sbindir@
libexecdir=@libexecdir@
sysconfdir=@sysconfdir@
sharedstatedir=@sharedstatedir@
localstatedir=@localstatedir@
libdir=@libdir@
includedir=@includedir@
oldincludedir=@oldincludedir@
datarootdir=@datarootdir@
datadir=@datadir@
infodir=@infodir@
localedir=@localedir@
mandir=@mandir@
docdir=@docdir@
htmldir=@htmldir@
dvidir=@dvidir@
pdfdir=@pdfdir@
psdir=@psdir@

INSTALL=@INSTALL@
AWK=@AWK@
GREP=@GREP@
DEBRA=@DEBRA@
GIT=@GIT@
GZIP=@GZIP@

VERSION=\$(shell \$(GREP) Version control | \$(AWK) '{print \$\$2}')

all:
	@true

install:
	# TODO \$(INSTALL) bin/$PACKAGE \$(DESTDIR)\$(bindir)/

uninstall:
	# TODO rm -f \$(DESTDIR)\$(bindir)/$PACKAGE

deb:
ifeq (root, \$(shell whoami))
	\$(DEBRA) create debian control
	\$(GITARCHIVE) --prefix=debian/ HEAD | \$(GZIP) >debian.tar.gz
	\$(DEBRA) sourceinstall debian debian.tar.gz -p \$(prefix)
	rm debian.tar.gz
	chown -R root:root debian
	\$(DEBRA) build debian ${PACKAGE}_\$(VERSION)_${ARCH}.deb
	\$(DEBRA) destroy debian
else
	@echo "You must be root to build a Debian package."
endif

.PHONY: all install uninstall deb
EOF

if [ -f control ]; then
	echo "[debra-makefile] control exists, skipping it" >&2
else
	cat >control <<EOF
Package: $PACKAGE
Version: TODO
Section: TODO
Priority: optional
Essential: no
Architecture: $ARCH
Depends: TODO
Pre-Depends: TODO
Recommends: TODO
Suggests: TODO
Conflicts: TODO
Replaces: TODO
Provides: TODO
Installed-Size: TODO
Maintainer: $(git config user.name) <$(git config user.email)>
Description: TODO
EOF
fi

if [ -f $(dirname $0)/../share/debra/install-sh ]; then
	cp $(dirname $0)/../share/debra/install-sh ./
elif [ -f $(dirname $0)/../install-sh ]; then
	cp $(dirname $0)/../install-sh ./
else
	echo "[debra-makefile] no install-sh found" >&2
fi

if [ -f configure.ac ]; then
	echo "[debra-makefile] configure.ac exists, skipping it" >&2
else
	autoscan
	sed s/FULL-PACKAGE-NAME/$PACKAGE/ <configure.scan \
		| sed s/BUG-REPORT-ADDRESS/$(git config user.email)/ >configure.ac
	if [ -f $(dirname $0)/../share/debra/configure.ac.patch ]; then
		patch configure.ac $(dirname $0)/../share/debra/configure.ac.patch
	elif [ -f $(dirname $0)/../configure.ac.patch ]; then
		patch configure.ac $(dirname $0)/../configure.ac.patch
	else
		echo "[debra-makefile] no configure.ac.patch found" >&2
	fi
fi

if [ -f .gitignore ]; then
	echo "[debra-makefile] .gitignore exists, appending to it" >&2
fi
cat >>.gitignore <<EOF
*.swp
autoscan.log
configure.scan
autom4te.cache
config.log
config.status
Makefile
EOF
